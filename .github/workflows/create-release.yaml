name: "Create Release"
run-name: "Create release ${{ inputs.name }} force: ${{ inputs.force }} dry-run: ${{ inputs.dry-run }}"

permissions:
  contents: read

on:
  workflow_dispatch:
    inputs:
      name: # release tag
        description: "Release tag (in the format x.y.z)"
        default: ""
        required: true
      force:
        description: "Force the release creation. This will overwrite an existing release with the same tag."
        default: false
        type: boolean
      dry-run:
        type: boolean
        description: "Do not publish. Builds image and runs tests but does not publish the release. (dry-run)"
        default: false

env:
  GH_HOST: github.com
  GH_TOKEN: ${{ github.token }}
  GH_REPO: ${{ github.repository }}
  IMAGE_REGISTRY: europe-docker.pkg.dev/kyma-project/prod
  IMAGE_NAME: kyma-otel-collector

jobs:
  validate-release:
    permissions:
      contents: write # Required for creating the release
    name: Validate release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Check if that release tag is correctly formatted
        run: |
          # Validate that the release tag is a proper semantic version
          if ! [[ ${{ inputs.name }} =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error ::Release tag ${{ inputs.name }} is not a valid semantic version"
            exit 1
          fi

      - name: Do NOT allow overwriting a release when it is not a draft
        run: |
          # check if release exists
          ! gh release view ${{ inputs.name }} --json tagName && exit 0
          # allow only overwriting draft releases
          gh release view ${{ inputs.name }} --json isDraft,tagName | jq -e .isDraft==true

      - name: Recreate the release tag if it already exists
        if: ${{ inputs.force }}
        run: |
          git tag --delete ${{ inputs.name }} || true
          git push --delete origin ${{ inputs.name }} || true

      - name: Check if release tag already exists
        if: ${{ !inputs.force }}
        run: |
          if [ $(git tag -l ${{ inputs.name }}) ]; then
            echo "::error ::Tag ${{ inputs.name }} already exists"
            exit 1
          fi

      - name: Check if milestone for release exists and is closed
        if: ${{ !inputs.force }}
        run: |
          state=$( gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            --hostname ${GH_HOST} \
            '/repos/'${GH_REPO}'/milestones?state=all' --paginate | jq -r '.[]|select(.title=="${{ inputs.name }}").state' )

          if [ -z "$state" ] || [ "$state" != "closed" ]; then
            echo "::error::Milestone for release ${{ inputs.name }} does not exist or is not closed"
            exit 1
          fi

      - name: Check for existing artifacts from previous release runs
        if: ${{ !inputs.force }}
        run: |
          # run the script to check if the artifacts exist, ignore failure if force is set
          ! docker run ananace/skopeo inspect docker://${IMAGE_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} || ${{ inputs.force }}

  create-draft:
    permissions:
      contents: write # Required for creating the release
    name: Create draft release
    needs:
      - validate-release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Validate branch
        run: |
          #parse version into major, minor, patch
          major=$(echo ${{ inputs.name }} | cut -d. -f1)
          minor=$(echo ${{ inputs.name }} | cut -d. -f2)
          patch=$(echo ${{ inputs.name }} | cut -d. -f3)

          if [ "${{ github.ref_name }}" = "main" ]; then
            if [ $patch -ne 0 ]; then
              echo "For patch releases, run the workflow from the release branch."
              exit 1
            else
              git checkout -b release-$major.$minor origin/main
              git push origin release-$major.$minor
            fi
          elif [[ "${{ github.ref_name }}" == release-* ]]; then

            branch_version=$(echo "${{ github.ref_name }}" | sed 's/release-//')
            if [ "$branch_version" != "$major.$minor" ]; then
              echo "Release branch ${{ github.ref_name }} does not match tag version."
              exit 1
            fi
            if [ $patch -eq 0 ]; then
              echo "For major or minor releases, run the workflow from the main branch."
              exit 1
            fi
          else
            echo "Invalid branch ${{ github.ref_name }}."
            exit 1
          fi

      - name: Create lightweight tag and push
        run: |
          git tag ${{ inputs.name }}
          # push the tag to the repository and trigger the tag release workflow
          git push origin ${{ inputs.name }}

      - name: Recreate the release if it already exists
        if: ${{ inputs.force }}
        run: |
          gh release delete ${{ inputs.name }} || true

      - name: Create draft release
        id: create-draft
        run: |
          gh release create ${{ inputs.name }} \
            --draft \
            --title "${{ inputs.name }}" \
            --generate-notes \
            --verify-tag

  envs:
    runs-on: ubuntu-latest
    outputs:
      build-args: ${{ steps.prepare-envs.outputs.build-args }}
      tag: ${{ steps.create-tags.outputs.tag }}
      otel-version: ${{ steps.load-envs.outputs.OTEL_VERSION }}
      otel-contrib-version: ${{ steps.load-envs.outputs.OTEL_CONTRIB_VERSION }}
      current-tag: ${{ steps.create-tags.outputs.CURRENT_TAG }}
      previous-tag: ${{ steps.create-tags.outputs.PREVIOUS_TAG }}
    needs:
      - create-draft

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          ref: ${{ inputs.name }}

      - name: Prepare envs
        id: prepare-envs
        run: |
          {
          # This creates a multiline string with the envs.
          # Everything between `build-args<<BUILD_ARGS` and BUILD_ARGS will be content of the build-args variable.
          echo 'build-args<<BUILD_ARGS'
          cat otel-collector/envs
          echo BUILD_ARGS
          } >> "$GITHUB_OUTPUT"

      - name: load envs into output
        id: load-envs
        run: |
          cat otel-collector/envs >> "$GITHUB_OUTPUT"

      - name: create tags
        id: create-tags
        run: |
          # the tag will look similar to: 0.102.1-0.1.0
          echo 'TAG=${{ steps.load-envs.outputs.OTEL_VERSION }}-${{ inputs.name }}' >> "$GITHUB_OUTPUT"

  build-image:
    permissions:
      id-token: write # Required for requesting the JWT token
      contents: read
    needs: envs
    uses: kyma-project/test-infra/.github/workflows/image-builder.yml@main # Usage: kyma-project/test-infra/.github/workflows/image-builder.yml@main
    with:
      name: kyma-otel-collector
      dockerfile: otel-collector/Dockerfile
      context: .
      build-args: ${{ needs.envs.outputs.build-args }}
      tags: ${{ needs.envs.outputs.tag }}

  list-images:
    needs: build-image
    runs-on: ubuntu-latest
    steps:
      - name: List images
        run: |
          echo "${{ needs.build-image.outputs.images }}"

  publish-release:
    permissions:
      contents: write # Required for creating the release
    name: Publish release
    needs:
      - build-image
      - create-draft
    if: inputs.dry-run == false
    runs-on: ubuntu-latest

    steps:
      - name: Publish release
        run: |
          gh release edit ${{ inputs.name }} --draft=false

name: Tag Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
env:

  # BUILD_MODE can be either `PR` or `release`. `PR` uses the code from the current branch using `replace` directive in the builder-config.yaml
  # `release` uses the code from the specified tag
  # BUILD_MODE is used to select the correct builder-config-{BUILD_MODE}.yaml in the dockerfile

  BUILD_MODE: release

jobs:

  envs:
    runs-on: ubuntu-latest
    outputs:
      build-args: ${{ steps.prepare-envs.outputs.build-args }}
      tags: ${{ steps.create-tags.outputs.tags }}
      otel-version: ${{ steps.load-envs.outputs.OTEL_VERSION }}
      otel-contrib-version: ${{ steps.load-envs.outputs.OTEL_CONTRIB_VERSION }}
      current-tag: ${{ steps.create-tags.outputs.CURRENT_TAG }}
      previous-tag: ${{ steps.create-tags.outputs.PREVIOUS_TAG }}
      semver: ${{ steps.prepare-envs.outputs.SEMVER }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        # fetch-depth: 0 is required to fetch all tags
        with:
          fetch-depth: 0

      - name: prepare envs
        id: prepare-envs
        run: |
          # just stripping the leading `v` from the tag
          SEMVER=$( echo ${{ github.ref_name }} | sed 's/^v//' )
          {
          # this creates a multiline string with the envs. 
          # Everything between `build-args<<BUILD_ARGS` and BUILD_ARGS will be content of the build-args variable.
          echo 'build-args<<BUILD_ARGS'
          echo "BUILD_MODE=${{ env.BUILD_MODE }}"
          echo "KYMA_OCC_VERSION=$SEMVER"
          cat otel-collector/envs
          echo BUILD_ARGS 
          
          echo "SEMVER=$SEMVER"
          } >> "$GITHUB_OUTPUT"

      - name: load envs into output
        id: load-envs
        run: |
          cat otel-collector/envs >> "$GITHUB_OUTPUT"

      - name: create tags
        id: create-tags
        run: |
          # the tag will look similar to: 0.102.1-0.1.0
          echo 'TAGS=${{ steps.load-envs.outputs.OTEL_VERSION }}-${{ steps.prepare-envs.outputs.SEMVER }}' >> "$GITHUB_OUTPUT"
          echo 'CURRENT_TAG=${{ github.ref_name }}' >> "$GITHUB_OUTPUT"
          
          # join all tags with the new tag in one list. Inject our new version in the list. Sort the list and get the line prior to the new tag
          PREFIX=v
          previous_version=$((git for-each-ref --sort=creatordate --format '%(refname)' refs/tags && echo refs/tags/v${{ steps.prepare-envs.outputs.SEMVER }}) \
          | grep -E "^refs/tags/${PREFIX}[0-9]+\.[0-9]+\.[0-9]+$" \
          | grep -E "[0-9]+\.[0-9]+\.[0-9]+" -o \
          | sort -t "." -k1,1n -k2,2n -k3,3n \
          | grep -B 1 ${{ steps.prepare-envs.outputs.SEMVER }} | head -1)
          
          echo "PREVIOUS_TAG=v${previous_version}" >> "$GITHUB_OUTPUT"

  build-image:
    needs: envs
    uses: kyma-project/test-infra/.github/workflows/image-builder.yml@main # Usage: kyma-project/test-infra/.github/workflows/image-builder.yml@main
    with:
      name: kyma-otel-collector
      dockerfile: otel-collector/Dockerfile
      context: .
      build-args: ${{ needs.envs.outputs.build-args }}
      tags: ${{ needs.envs.outputs.tags }}

  list-images:
    needs: build-image
    runs-on: ubuntu-latest
    steps:
      - name: List images
        run: |
          echo "${{ needs.build-image.outputs.images }}"

  release:
    runs-on: ubuntu-latest
    needs: [ build-image, envs ]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --clean
        env:
          GORELEASER_CURRENT_TAG: ${{ needs.envs.outputs.current-tag }}
          GORELEASER_PREVIOUS_TAG: ${{ needs.envs.outputs.previous-tag }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
